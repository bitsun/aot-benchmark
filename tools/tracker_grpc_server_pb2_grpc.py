# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tracker_grpc_server_pb2 as tracker__grpc__server__pb2


class TrackAnythingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.set_template_mask = channel.unary_unary(
                '/Ivitec.TrackAnything/set_template_mask',
                request_serializer=tracker__grpc__server__pb2.InitialMask.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.Response.FromString,
                )
        self.clear = channel.unary_unary(
                '/Ivitec.TrackAnything/clear',
                request_serializer=tracker__grpc__server__pb2.Void.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.Response.FromString,
                )
        self.track = channel.unary_unary(
                '/Ivitec.TrackAnything/track',
                request_serializer=tracker__grpc__server__pb2.Image.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.TrackResponse.FromString,
                )
        self.freeze = channel.unary_unary(
                '/Ivitec.TrackAnything/freeze',
                request_serializer=tracker__grpc__server__pb2.Void.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.Response.FromString,
                )


class TrackAnythingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def set_template_mask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clear(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def track(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def freeze(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrackAnythingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'set_template_mask': grpc.unary_unary_rpc_method_handler(
                    servicer.set_template_mask,
                    request_deserializer=tracker__grpc__server__pb2.InitialMask.FromString,
                    response_serializer=tracker__grpc__server__pb2.Response.SerializeToString,
            ),
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=tracker__grpc__server__pb2.Void.FromString,
                    response_serializer=tracker__grpc__server__pb2.Response.SerializeToString,
            ),
            'track': grpc.unary_unary_rpc_method_handler(
                    servicer.track,
                    request_deserializer=tracker__grpc__server__pb2.Image.FromString,
                    response_serializer=tracker__grpc__server__pb2.TrackResponse.SerializeToString,
            ),
            'freeze': grpc.unary_unary_rpc_method_handler(
                    servicer.freeze,
                    request_deserializer=tracker__grpc__server__pb2.Void.FromString,
                    response_serializer=tracker__grpc__server__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Ivitec.TrackAnything', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrackAnything(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def set_template_mask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.TrackAnything/set_template_mask',
            tracker__grpc__server__pb2.InitialMask.SerializeToString,
            tracker__grpc__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.TrackAnything/clear',
            tracker__grpc__server__pb2.Void.SerializeToString,
            tracker__grpc__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def track(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.TrackAnything/track',
            tracker__grpc__server__pb2.Image.SerializeToString,
            tracker__grpc__server__pb2.TrackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def freeze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.TrackAnything/freeze',
            tracker__grpc__server__pb2.Void.SerializeToString,
            tracker__grpc__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SegmentAnythingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_decoder_onnx_model = channel.unary_stream(
                '/Ivitec.SegmentAnything/get_decoder_onnx_model',
                request_serializer=tracker__grpc__server__pb2.Void.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.OnnxFileSegment.FromString,
                )
        self.set_image = channel.unary_unary(
                '/Ivitec.SegmentAnything/set_image',
                request_serializer=tracker__grpc__server__pb2.Image.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.Response.FromString,
                )
        self.encode_image = channel.unary_unary(
                '/Ivitec.SegmentAnything/encode_image',
                request_serializer=tracker__grpc__server__pb2.Image.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.ImageEmbeddingResponse.FromString,
                )


class SegmentAnythingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_decoder_onnx_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_image(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def encode_image(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SegmentAnythingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_decoder_onnx_model': grpc.unary_stream_rpc_method_handler(
                    servicer.get_decoder_onnx_model,
                    request_deserializer=tracker__grpc__server__pb2.Void.FromString,
                    response_serializer=tracker__grpc__server__pb2.OnnxFileSegment.SerializeToString,
            ),
            'set_image': grpc.unary_unary_rpc_method_handler(
                    servicer.set_image,
                    request_deserializer=tracker__grpc__server__pb2.Image.FromString,
                    response_serializer=tracker__grpc__server__pb2.Response.SerializeToString,
            ),
            'encode_image': grpc.unary_unary_rpc_method_handler(
                    servicer.encode_image,
                    request_deserializer=tracker__grpc__server__pb2.Image.FromString,
                    response_serializer=tracker__grpc__server__pb2.ImageEmbeddingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Ivitec.SegmentAnything', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SegmentAnything(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_decoder_onnx_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Ivitec.SegmentAnything/get_decoder_onnx_model',
            tracker__grpc__server__pb2.Void.SerializeToString,
            tracker__grpc__server__pb2.OnnxFileSegment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.SegmentAnything/set_image',
            tracker__grpc__server__pb2.Image.SerializeToString,
            tracker__grpc__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def encode_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.SegmentAnything/encode_image',
            tracker__grpc__server__pb2.Image.SerializeToString,
            tracker__grpc__server__pb2.ImageEmbeddingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StatefulTrackerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.next_available_tracker_instance = channel.unary_unary(
                '/Ivitec.StatefulTrackerService/next_available_tracker_instance',
                request_serializer=tracker__grpc__server__pb2.Void.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.InstanceResponse.FromString,
                )
        self.set_template_mask = channel.unary_unary(
                '/Ivitec.StatefulTrackerService/set_template_mask',
                request_serializer=tracker__grpc__server__pb2.StatefulInitialMask.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.Response.FromString,
                )
        self.track = channel.unary_unary(
                '/Ivitec.StatefulTrackerService/track',
                request_serializer=tracker__grpc__server__pb2.StatefulTrackRequest.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.TrackResponse.FromString,
                )
        self.freeze = channel.unary_unary(
                '/Ivitec.StatefulTrackerService/freeze',
                request_serializer=tracker__grpc__server__pb2.TrackerInstance.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.Response.FromString,
                )
        self.finish = channel.unary_unary(
                '/Ivitec.StatefulTrackerService/finish',
                request_serializer=tracker__grpc__server__pb2.TrackerInstance.SerializeToString,
                response_deserializer=tracker__grpc__server__pb2.Response.FromString,
                )


class StatefulTrackerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def next_available_tracker_instance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_template_mask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def track(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def freeze(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatefulTrackerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'next_available_tracker_instance': grpc.unary_unary_rpc_method_handler(
                    servicer.next_available_tracker_instance,
                    request_deserializer=tracker__grpc__server__pb2.Void.FromString,
                    response_serializer=tracker__grpc__server__pb2.InstanceResponse.SerializeToString,
            ),
            'set_template_mask': grpc.unary_unary_rpc_method_handler(
                    servicer.set_template_mask,
                    request_deserializer=tracker__grpc__server__pb2.StatefulInitialMask.FromString,
                    response_serializer=tracker__grpc__server__pb2.Response.SerializeToString,
            ),
            'track': grpc.unary_unary_rpc_method_handler(
                    servicer.track,
                    request_deserializer=tracker__grpc__server__pb2.StatefulTrackRequest.FromString,
                    response_serializer=tracker__grpc__server__pb2.TrackResponse.SerializeToString,
            ),
            'freeze': grpc.unary_unary_rpc_method_handler(
                    servicer.freeze,
                    request_deserializer=tracker__grpc__server__pb2.TrackerInstance.FromString,
                    response_serializer=tracker__grpc__server__pb2.Response.SerializeToString,
            ),
            'finish': grpc.unary_unary_rpc_method_handler(
                    servicer.finish,
                    request_deserializer=tracker__grpc__server__pb2.TrackerInstance.FromString,
                    response_serializer=tracker__grpc__server__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Ivitec.StatefulTrackerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StatefulTrackerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def next_available_tracker_instance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.StatefulTrackerService/next_available_tracker_instance',
            tracker__grpc__server__pb2.Void.SerializeToString,
            tracker__grpc__server__pb2.InstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_template_mask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.StatefulTrackerService/set_template_mask',
            tracker__grpc__server__pb2.StatefulInitialMask.SerializeToString,
            tracker__grpc__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def track(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.StatefulTrackerService/track',
            tracker__grpc__server__pb2.StatefulTrackRequest.SerializeToString,
            tracker__grpc__server__pb2.TrackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def freeze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.StatefulTrackerService/freeze',
            tracker__grpc__server__pb2.TrackerInstance.SerializeToString,
            tracker__grpc__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ivitec.StatefulTrackerService/finish',
            tracker__grpc__server__pb2.TrackerInstance.SerializeToString,
            tracker__grpc__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
